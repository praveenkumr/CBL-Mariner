diff -up ilmbase-2.2.0/Imath/ImathFun.h.glibc_iszero ilmbase-2.2.0/Imath/ImathFun.h
--- ilmbase-2.2.0/Imath/ImathFun.h.glibc_iszero	2014-08-09 21:03:39.000000000 -0500
+++ ilmbase-2.2.0/Imath/ImathFun.h	2016-10-16 09:43:04.514932845 -0500
@@ -132,7 +132,7 @@ cmpt (T a, T b, T t)
 
 template <class T>
 inline bool
-iszero (T a, T t)
+(iszero) (T a, T t)
 {
     return (IMATH_INTERNAL_NAMESPACE::abs (a) <= t) ? 1 : 0;
 }
diff -up ilmbase-2.2.0/ImathTest/testFrustum.cpp.glibc_iszero ilmbase-2.2.0/ImathTest/testFrustum.cpp
--- ilmbase-2.2.0/ImathTest/testFrustum.cpp.glibc_iszero	2014-08-09 21:03:40.000000000 -0500
+++ ilmbase-2.2.0/ImathTest/testFrustum.cpp	2016-10-16 09:44:45.466666479 -0500
@@ -88,10 +88,10 @@ testFrustumPlanes  (IMATH_INTERNAL_NAMES
                             IMATH_INTERNAL_NAMESPACE::V3f pt = (! ortho) ? o :
                                 IMATH_INTERNAL_NAMESPACE::V3f (0.0f, frustum.top(), 0.0f);
                             float d = planes0[0].distanceTo (pt);
-                            assert (IMATH_INTERNAL_NAMESPACE::iszero (d, eps));
+                            assert ((IMATH_INTERNAL_NAMESPACE::iszero) (d, eps));
                             pt = pt * mView;
                             d = planes[0].distanceTo (pt);
-                            assert (IMATH_INTERNAL_NAMESPACE::iszero (d, eps));
+                            assert ((IMATH_INTERNAL_NAMESPACE::iszero) (d, eps));
 
                             IMATH_INTERNAL_NAMESPACE::V3f right = IMATH_INTERNAL_NAMESPACE::V3f(1, 0, 0);
                             assert ((right ^ planes0[1].normal) > 0.0);
@@ -101,10 +101,10 @@ testFrustumPlanes  (IMATH_INTERNAL_NAMES
                             pt = (! ortho) ? o :
                                 IMATH_INTERNAL_NAMESPACE::V3f (frustum.right(), 0.0f, 0.0f);
                             d = planes0[1].distanceTo (pt);
-                            assert (IMATH_INTERNAL_NAMESPACE::iszero (d, eps));
+                            assert ((IMATH_INTERNAL_NAMESPACE::iszero) (d, eps));
                             pt = pt * mView;
                             d = planes[1].distanceTo (pt);
-                            assert (IMATH_INTERNAL_NAMESPACE::iszero (d, eps));
+                            assert ((IMATH_INTERNAL_NAMESPACE::iszero) (d, eps));
 
                             IMATH_INTERNAL_NAMESPACE::V3f down = IMATH_INTERNAL_NAMESPACE::V3f(0, -1, 0);
                             assert ((down ^ planes0[2].normal) > 0.0);
@@ -114,10 +114,10 @@ testFrustumPlanes  (IMATH_INTERNAL_NAMES
                             pt = (! ortho) ? o :
                                 IMATH_INTERNAL_NAMESPACE::V3f (0.0f, frustum.bottom(), 0.0f);
                             d = planes0[2].distanceTo (pt);
-                            assert (IMATH_INTERNAL_NAMESPACE::iszero (d, eps));
+                            assert ((IMATH_INTERNAL_NAMESPACE::iszero) (d, eps));
                             pt = pt * mView;
                             d = planes[2].distanceTo (pt);
-                            assert (IMATH_INTERNAL_NAMESPACE::iszero (d, eps));
+                            assert ((IMATH_INTERNAL_NAMESPACE::iszero) (d, eps));
 
                             IMATH_INTERNAL_NAMESPACE::V3f left = IMATH_INTERNAL_NAMESPACE::V3f(-1, 0, 0);
                             assert ((left ^ planes0[3].normal) > 0.0);
@@ -127,10 +127,10 @@ testFrustumPlanes  (IMATH_INTERNAL_NAMES
                             pt = (! ortho) ? o :
                                 IMATH_INTERNAL_NAMESPACE::V3f (frustum.left(), 0.0f, 0.0f);
                             d = planes0[3].distanceTo (pt);
-                            assert (IMATH_INTERNAL_NAMESPACE::iszero (d, eps));
+                            assert ((IMATH_INTERNAL_NAMESPACE::iszero) (d, eps));
                             pt = pt * mView;
                             d = planes[3].distanceTo (pt);
-                            assert (IMATH_INTERNAL_NAMESPACE::iszero (d, eps));
+                            assert ((IMATH_INTERNAL_NAMESPACE::iszero) (d, eps));
 
                             IMATH_INTERNAL_NAMESPACE::V3f front = IMATH_INTERNAL_NAMESPACE::V3f(0, 0, 1);
                             assert ((front ^ planes0[4].normal) > 0.0);
@@ -139,10 +139,10 @@ testFrustumPlanes  (IMATH_INTERNAL_NAMES
                             
                             pt = IMATH_INTERNAL_NAMESPACE::V3f (0.0f, 0.0f, -frustum.nearPlane());
                             d = planes0[4].distanceTo (pt);
-                            assert (IMATH_INTERNAL_NAMESPACE::iszero (d, eps));
+                            assert ((IMATH_INTERNAL_NAMESPACE::iszero) (d, eps));
                             pt = pt * mView;
                             d = planes[4].distanceTo (pt);
-                            assert (IMATH_INTERNAL_NAMESPACE::iszero (d, eps));
+                            assert ((IMATH_INTERNAL_NAMESPACE::iszero) (d, eps));
 
                             IMATH_INTERNAL_NAMESPACE::V3f back = IMATH_INTERNAL_NAMESPACE::V3f(0, 0, -1);
                             assert ((back ^ planes0[5].normal) > 0.0);
@@ -151,10 +151,10 @@ testFrustumPlanes  (IMATH_INTERNAL_NAMES
                             
                             pt = IMATH_INTERNAL_NAMESPACE::V3f (0.0f, 0.0f, -frustum.farPlane());
                             d = planes0[5].distanceTo (pt);
-                            assert (IMATH_INTERNAL_NAMESPACE::iszero (d, eps));
+                            assert ((IMATH_INTERNAL_NAMESPACE::iszero) (d, eps));
                             pt = pt * mView;
                             d = planes[5].distanceTo (pt);
-                            assert (IMATH_INTERNAL_NAMESPACE::iszero (d, eps));
+                            assert ((IMATH_INTERNAL_NAMESPACE::iszero) (d, eps));
                         }
                     }
                 }
