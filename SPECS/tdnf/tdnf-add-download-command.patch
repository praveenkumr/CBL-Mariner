From d8f0bf57ed1024fe6c6970530f8480b651e2cdcc Mon Sep 17 00:00:00 2001
From: Joe Schmitt <joschmit@microsoft.com>
Date: Thu, 14 Nov 2019 21:54:04 +0000
Subject: [PATCH] Merged PR 221: Add download option to TDNF

Add a `download` command to TDNF that will download RPMs to a directory.

Usage:
- `tdnf download <package1, package2, ...> --destdir /path/to/download/folder>`
- To download a package and all of its dependencies even if the system already has them installed, add the `--alldeps` option.

Behavior:
- `tdnf download` will create the destination directory if it does not exist.
- `tdnf download` will respond to other tdnf options, such as silent, no gpg check, etc.
- `tdnf download` will skip RPMs if the correct version already exists in the destination directory.
- `tdnf download` will check GPG signatures unless otherwise specified.

From: Joe Schmitt <joschmit@microsoft.com>
Date: Tue, 28 Jul 2020 15:49:55 -0700
Subject: [PATCH] Add download-nodeps command

From: Mateusz Malisz <mamalisz@microsoft.com>
Date: Thu, 20 Jan 2022 21:54:04+0000
Subject: [PATCH] Update download commands to work with tdnf-3.2.2.

Updated code to work with tdnf 3.2.2. 

diff --git a/client/api.c b/client/api.c
index ef25d09..561461b 100644
--- a/client/api.c
+++ b/client/api.c
@@ -629,10 +629,10 @@ TDNFOpenHandle(
 {
     uint32_t dwError = 0;
     PTDNF pTdnf = NULL;
-    PSolvSack pSack = NULL;
     char *pszCacheDir = NULL;
     char *pszRepoDir = NULL;
     int nHasOptReposdir = 0;
+    const int nSkipInstalledRpms = 0;
 
     if(!pArgs || !ppTdnf)
     {
@@ -704,25 +704,7 @@ TDNFOpenHandle(
     dwError = TDNFLoadPlugins(pTdnf);
     BAIL_ON_TDNF_ERROR(dwError);
 
-    dwError = SolvInitSack(
-                  &pSack,
-                  pTdnf->pConf->pszCacheDir,
-                  pTdnf->pArgs->pszInstallRoot);
-    BAIL_ON_TDNF_ERROR(dwError);
-
-    dwError = TDNFLoadRepoData(
-                  pTdnf,
-                  REPOLISTFILTER_ALL,
-                  &pTdnf->pRepos);
-    BAIL_ON_TDNF_ERROR(dwError);
-
-    dwError = TDNFRepoListFinalize(pTdnf);
-    BAIL_ON_TDNF_ERROR(dwError);
-
-    dwError = TDNFInitCmdLineRepo(pTdnf, pSack);
-    BAIL_ON_TDNF_ERROR(dwError);
-
-    pTdnf->pSack = pSack;
+    dwError = TDNFResetSack(pTdnf, nSkipInstalledRpms);
     *ppTdnf = pTdnf;
 
 cleanup:
@@ -739,10 +721,6 @@ error:
     {
         *ppTdnf = NULL;
     }
-    if(pSack)
-    {
-        SolvFreeSack(pSack);
-    }
     goto cleanup;
 }
 
@@ -1463,7 +1441,7 @@ TDNFRepoQuery(
         BAIL_ON_TDNF_ERROR(dwError);
     }
 
-    /* get results in list */ 
+    /* get results in list */
     dwError = SolvGetQueryResult(pQuery, &pPkgList);
     BAIL_ON_TDNF_ERROR(dwError);
 
@@ -1939,3 +1917,184 @@ TDNFGetPackageName(
 {
     return PACKAGE_NAME;
 }
+
+uint32_t
+TDNFResetSack(
+    PTDNF pTdnf,
+    int nSkipInstalledRpms
+    )
+{
+    uint32_t dwError = 0;
+    PSolvSack pSack = NULL;
+
+    if(!pTdnf)
+    {
+        dwError = ERROR_TDNF_INVALID_PARAMETER;
+        BAIL_ON_TDNF_ERROR(dwError);
+    }
+
+    dwError = SolvInitSack(
+        &pSack,
+        pTdnf->pConf->pszCacheDir,
+        pTdnf->pArgs->pszInstallRoot,
+        nSkipInstalledRpms);
+    BAIL_ON_TDNF_ERROR(dwError);
+
+    dwError = TDNFLoadRepoData(
+        pTdnf,
+        REPOLISTFILTER_ALL,
+        &pTdnf->pRepos);
+    BAIL_ON_TDNF_ERROR(dwError);
+
+    dwError = TDNFRepoListFinalize(pTdnf);
+    BAIL_ON_TDNF_ERROR(dwError);
+
+    dwError = TDNFInitCmdLineRepo(pTdnf, pSack);
+    BAIL_ON_TDNF_ERROR(dwError);
+
+    if(!pTdnf->pSack)
+    {
+        SolvFreeSack(pTdnf->pSack);
+    }
+    pTdnf->pSack = pSack;
+
+cleanup:
+    return dwError;
+
+error:
+    if(pSack)
+    {
+        SolvFreeSack(pSack);
+    }
+    goto cleanup;
+}
+
+//Downloads all requested packages without any of their dependencies.
+uint32_t
+TDNFDownloadNoDepsCommand(
+    PTDNF pTdnf,
+    TDNF_SCOPE nScope,
+    char** ppszPackageNameSpecs,
+    PTDNF_PKG_INFO* ppPkgInfo,
+    uint32_t* pdwCount
+    )
+{
+    const int nSkipInstalledRpms = 1;
+    const int nUpgrade = 0;
+
+    uint32_t dwError = 0;
+    uint32_t dwCount = 0;
+    uint32_t dwIndex = 0;
+
+    PSolvQuery pQuery = NULL;
+    PTDNF_PKG_INFO pPkgInfo = NULL;
+    PTDNF_PKG_INFO pPkg = NULL;
+    PSolvPackageList pPkgList = NULL;
+
+    TDNFRPMTS ts = {0};
+
+    if(!pTdnf || !pTdnf->pSack ||!pdwCount || !ppPkgInfo ||
+       !ppszPackageNameSpecs || IsNullOrEmptyString(pTdnf->pArgs->pszDestDir))
+    {
+        dwError = ERROR_TDNF_INVALID_PARAMETER;
+        BAIL_ON_TDNF_ERROR(dwError);
+    }
+
+    dwError = TDNFResetSack(pTdnf, nSkipInstalledRpms);
+    BAIL_ON_TDNF_ERROR(dwError);
+
+    dwError = SolvCreateQuery(pTdnf->pSack, &pQuery);
+    BAIL_ON_TDNF_ERROR(dwError);
+
+    dwError = TDNFApplyScopeFilter(pQuery, nScope);
+    BAIL_ON_TDNF_ERROR(dwError);
+
+    dwError = SolvApplyPackageFilter(pQuery, ppszPackageNameSpecs);
+    BAIL_ON_TDNF_ERROR(dwError);
+
+    dwError = SolvApplyListQuery(pQuery);
+    BAIL_ON_TDNF_ERROR(dwError);
+
+    dwError = SolvGetQueryResult(pQuery, &pPkgList);
+    BAIL_ON_TDNF_ERROR(dwError);
+
+    dwError = TDNFPopulatePkgInfoArray(
+                  pTdnf->pSack,
+                  pPkgList,
+                  DETAIL_INFO,
+                  &pPkgInfo,
+                  &dwCount);
+    BAIL_ON_TDNF_ERROR(dwError);
+
+    if(dwError == ERROR_TDNF_NO_MATCH && !*ppszPackageNameSpecs)
+    {
+        dwError = 0;
+    }
+
+    *ppPkgInfo = pPkgInfo;
+    *pdwCount = dwCount;
+
+    ts.nQuiet = pTdnf->pArgs->nQuiet;
+
+    ts.pTS = rpmtsCreate();
+    if(!ts.pTS)
+    {
+        dwError = ERROR_TDNF_RPMTS_CREATE_FAILED;
+        BAIL_ON_TDNF_ERROR(dwError);
+    }
+
+    ts.nTransFlags = rpmtsSetFlags (ts.pTS, RPMTRANS_FLAG_NONE);
+
+    if(rpmtsSetNotifyCallback(ts.pTS, TDNFRpmCB, (void*)&ts))
+    {
+        dwError = ERROR_TDNF_RPMTS_SET_CB_FAILED;
+        BAIL_ON_TDNF_ERROR(dwError);
+    }
+
+    for(dwIndex = 0; dwIndex < dwCount; ++dwIndex)
+    {
+        pPkg = &pPkgInfo[dwIndex];
+
+        dwError = TDNFTransAddInstallPkg(
+                    &ts,
+                    pTdnf,
+                    pPkg->pszLocation,
+                    pPkg->pszName,
+                    pPkg->pszRepoName,
+                    nUpgrade);
+        BAIL_ON_TDNF_ERROR(dwError);
+        rpmtsEmpty(ts.pTS);
+    }
+
+cleanup:
+    if(pQuery)
+    {
+        SolvFreeQuery(pQuery);
+    }
+    if(pPkgList)
+    {
+        SolvFreePackageList(pPkgList);
+    }
+    if(ts.pTS)
+    {
+        rpmtsCloseDB(ts.pTS);
+        rpmtsFree(ts.pTS);
+    }
+
+    return dwError;
+
+error:
+    if(ppPkgInfo)
+    {
+        *ppPkgInfo = NULL;
+    }
+    if(pdwCount)
+    {
+        *pdwCount = 0;
+    }
+    if(pPkgInfo)
+    {
+        TDNFFreePackageInfoArray(pPkgInfo, dwCount);
+    }
+    goto cleanup;
+}
diff --git a/client/goal.c b/client/goal.c
index 916388c..3700df5 100644
--- a/client/goal.c
+++ b/client/goal.c
@@ -514,6 +514,7 @@ TDNFAddGoal(
             break;
         case ALTER_REINSTALL:
         case ALTER_INSTALL:
+        case ALTER_INSTALL_ONLY_DOWNLOAD:
         case ALTER_UPGRADE:
             dwError = SolvAddPkgInstallJob(pQueueJobs, dwId);
             BAIL_ON_TDNF_ERROR(dwError);
diff --git a/client/init.c b/client/init.c
index 871dae7..1bee9f5 100644
--- a/client/init.c
+++ b/client/init.c
@@ -37,6 +37,7 @@ TDNFCloneCmdArgs(
                   (void**)&pCmdArgs);
     BAIL_ON_TDNF_ERROR(dwError);
 
+    pCmdArgs->nAllDeps       = pCmdArgsIn->nAllDeps;
     pCmdArgs->nAllowErasing  = pCmdArgsIn->nAllowErasing;
     pCmdArgs->nAssumeNo      = pCmdArgsIn->nAssumeNo;
     pCmdArgs->nAssumeYes     = pCmdArgsIn->nAssumeYes;
diff --git a/client/packageutils.c b/client/packageutils.c
index e130d66..510c337 100644
--- a/client/packageutils.c
+++ b/client/packageutils.c
@@ -186,6 +186,13 @@ TDNFPopulatePkgInfoArray(
                           dwPkgId,
                           &pPkgInfo->pszDescription);
             BAIL_ON_TDNF_ERROR(dwError);
+
+            dwError = SolvGetPkgLocationFromId(
+                          pSack,
+                          dwPkgId,
+                          &pPkgInfo->pszLocation);
+            BAIL_ON_TDNF_ERROR(dwError);
+
         }
         else if (nDetail == DETAIL_CHANGELOG)
         {
@@ -1211,4 +1218,3 @@ cleanup:
 error:
     goto cleanup;
 }
-
diff --git a/client/resolve.c b/client/resolve.c
index b9164e8..125d4b2 100644
--- a/client/resolve.c
+++ b/client/resolve.c
@@ -378,7 +378,8 @@ TDNFPrepareSinglePkg(
                       pszPkgName);
         BAIL_ON_TDNF_ERROR(dwError);
     }
-    else if (nAlterType == ALTER_INSTALL)
+    else if (nAlterType == ALTER_INSTALL ||
+             nAlterType == ALTER_INSTALL_ONLY_DOWNLOAD)
     {
         dwError = TDNFAddPackagesForInstall(
                       pSack,
diff --git a/client/rpmtrans.c b/client/rpmtrans.c
index 8fa055a..2910d3d 100644
--- a/client/rpmtrans.c
+++ b/client/rpmtrans.c
@@ -41,7 +41,9 @@ TDNFRpmExecTransaction(
 
     ts.nQuiet = pTdnf->pArgs->nQuiet;
     nKeepCachedRpms = pTdnf->pConf->nKeepCache;
-    nDownloadOnly = pTdnf->pArgs->nDownloadOnly;
+    nDownloadOnly = pTdnf->pArgs->nDownloadOnly ||
+                    nAlterType == ALTER_INSTALL_ONLY_DOWNLOAD;
+
 
     dwError = TDNFAllocateMemory(
                   1,
@@ -509,6 +511,12 @@ TDNFTransAddInstallPkg(
     Header rpmHeader = NULL;
     PTDNF_CACHED_RPM_ENTRY pRpmCache = NULL;
 
+    if (!pTdnf || !pTdnf->pConf)
+    {
+        dwError = ERROR_TDNF_INVALID_PARAMETER;
+        BAIL_ON_TDNF_ERROR(dwError);
+    }
+
     if (pszPackageLocation[0] == '/')
     {
         dwError = TDNFAllocateString(
@@ -519,7 +527,9 @@ TDNFTransAddInstallPkg(
     }
     else
     {
-        if (!pTdnf->pArgs->nDownloadOnly || pTdnf->pArgs->pszDownloadDir == NULL)
+        if (!pTdnf->pArgs->nDownloadOnly ||
+            IsNullOrEmptyString(pTdnf->pArgs->pszDownloadDir) ||
+            IsNullOrEmptyString(pTdnf->pArgs->pszDestDir))
         {
             dwError = TDNFDownloadPackageToCache(
                           pTdnf,
@@ -531,14 +541,29 @@ TDNFTransAddInstallPkg(
         }
         else
         {
-            dwError = TDNFDownloadPackageToDirectory(
-                          pTdnf,
-                          pszPackageLocation,
-                          pszPkgName,
-                          pszRepoName,
-                          pTdnf->pArgs->pszDownloadDir,
-                          &pszFilePath
-            );
+            if(!IsNullOrEmptyString(pTdnf->pArgs->pszDestDir)) {
+                dwError = TDNFDownloadPackageToDirectory(
+                    pTdnf,
+                    pszPackageLocation,
+                    pszPkgName,
+                    pszRepoName,
+                    pTdnf->pArgs->pszDestDir,
+                    &pszFilePath
+                    );
+            }
+            else if(!IsNullOrEmptyString(pTdnf->pArgs->pszDownloadDir)) {
+                dwError = TDNFDownloadPackageToDirectory(
+                    pTdnf,
+                    pszPackageLocation,
+                    pszPkgName,
+                    pszRepoName,
+                    pTdnf->pArgs->pszDownloadDir,
+                    &pszFilePath
+                    );
+            }
+            else {
+                dwError = ERROR_TDNF_INVALID_PARAMETER;
+            }
 
         }
         BAIL_ON_TDNF_ERROR(dwError);
diff --git a/include/tdnf.h b/include/tdnf.h
index d15ea62..e35a65b 100644
--- a/include/tdnf.h
+++ b/include/tdnf.h
@@ -173,6 +173,13 @@ TDNFSearchCommand(
     uint32_t* pdwCount
     );
 
+//reset solv goal dependency resolution
+uint32_t
+TDNFResetSack(
+    PTDNF pTdnf,
+    int nSkipInstalledRpms
+    );
+
 //invoke solv goal dependency resolution
 //return solved pkg info which has descriptive
 //info about steps to reach current goal.
@@ -277,6 +284,15 @@ TDNFUninit(
     void
     );
 
+//Downloads all requested packages without any of their dependencies.
+uint32_t
+TDNFDownloadNoDepsCommand(
+    PTDNF pTdnf,
+    TDNF_SCOPE nScope,
+    char** ppszPackageNameSpecs,
+    PTDNF_PKG_INFO* ppPkgInfo,
+    uint32_t* pdwCount
+    );
 
 #ifdef __cplusplus
 }
diff --git a/include/tdnfcli.h b/include/tdnfcli.h
index 4644cd0..f33f9d4 100644
--- a/include/tdnfcli.h
+++ b/include/tdnfcli.h
@@ -169,6 +169,18 @@ TDNFCliInfoCommand(
     PTDNF_CMD_ARGS pCmdArgs
     );
 
+uint32_t
+TDNFCliDownloadCommand(
+    PTDNF_CLI_CONTEXT pContext,
+    PTDNF_CMD_ARGS pCmdArgs
+    );
+
+uint32_t
+TDNFCliDownloadNoDepsCommand(
+    PTDNF_CLI_CONTEXT pContext,
+    PTDNF_CMD_ARGS pCmdArgs
+    );
+
 uint32_t
 TDNFCliSearchCommand(
     PTDNF_CLI_CONTEXT pContext,
diff --git a/include/tdnfclitypes.h b/include/tdnfclitypes.h
index b7b33d1..3a6178e 100644
--- a/include/tdnfclitypes.h
+++ b/include/tdnfclitypes.h
@@ -121,6 +121,11 @@ typedef uint32_t
     uint32_t *
     );
 
+typedef uint32_t
+(*PFN_TDNF_RESET_SACK)(
+    PTDNF_CLI_CONTEXT,
+    int);
+
 typedef uint32_t
 (*PFN_TDNF_RESOLVE)(
     PTDNF_CLI_CONTEXT,
@@ -147,6 +152,15 @@ typedef uint32_t
     PTDNF_UPDATEINFO_ARGS,
     PTDNF_UPDATEINFO_SUMMARY *);
 
+typedef uint32_t
+(*PFN_TDNF_DOWNLOAD_NO_DEPS)(
+    PTDNF_CLI_CONTEXT,
+    PTDNF_LIST_ARGS,
+    PTDNF_PKG_INFO *,
+    uint32_t *
+    );
+
+
 typedef struct _TDNF_CLI_CONTEXT_
 {
     HTDNF hTdnf;
@@ -162,12 +176,14 @@ typedef struct _TDNF_CLI_CONTEXT_
     PFN_TDNF_LIST               pFnList;
     PFN_TDNF_PROVIDES           pFnProvides;
     PFN_TDNF_REPOLIST           pFnRepoList;
+    PFN_TDNF_RESET_SACK         pFnResetSack;
     PFN_TDNF_REPOSYNC           pFnRepoSync;
     PFN_TDNF_REPOQUERY          pFnRepoQuery;
     PFN_TDNF_RESOLVE            pFnResolve;
     PFN_TDNF_SEARCH             pFnSearch;
     PFN_TDNF_UPDATEINFO         pFnUpdateInfo;
     PFN_TDNF_UPDATEINFO_SUMMARY pFnUpdateInfoSummary;
+    PFN_TDNF_DOWNLOAD_NO_DEPS   pFnDownloadNoDeps;
 }TDNF_CLI_CONTEXT, *PTDNF_CLI_CONTEXT;
 
 #ifdef __cplusplus
diff --git a/include/tdnftypes.h b/include/tdnftypes.h
index a547b8a..a50cfec 100644
--- a/include/tdnftypes.h
+++ b/include/tdnftypes.h
@@ -54,7 +54,8 @@ typedef enum
     ALTER_UPGRADE,
     ALTER_UPGRADEALL,
     ALTER_DISTRO_SYNC,
-    ALTER_OBSOLETED
+    ALTER_OBSOLETED,
+    ALTER_INSTALL_ONLY_DOWNLOAD
 }TDNF_ALTERTYPE;
 
 typedef enum
@@ -231,6 +232,7 @@ typedef struct _TDNF_CMD_ARGS
     //Represent options in the dnf cmd line.
     //All options are one to one maps to dnf command line
     //options (incomplete)
+    int nAllDeps;          //add all package dependencies when resolving
     int nAllowErasing;     //allow erasures when solving
     int nAssumeNo;         //assume no for all questions
     int nAssumeYes;        //assume yes for all questions
@@ -251,6 +253,7 @@ typedef struct _TDNF_CMD_ARGS
     int nDisableExcludes;  //disable excludes from tdnf.conf
     int nDownloadOnly;     //download packages only, no install
     char* pszDownloadDir;  //directory for download, if nDownloadOnly is set
+    char* pszDestDir;      //directory for download, if install command is called
     char* pszInstallRoot;  //set install root
     char* pszConfFile;     //set conf file location
     char* pszReleaseVer;   //Release version
diff --git a/solv/prototypes.h b/solv/prototypes.h
index 04e877e..b04411d 100644
--- a/solv/prototypes.h
+++ b/solv/prototypes.h
@@ -315,7 +315,8 @@ uint32_t
 SolvInitSack(
     PSolvSack *ppSack,
     const char* pszCacheDir,
-    const char* pszRootDir
+    const char* pszRootDir,
+    int nSkipInstalledRpms
     );
 
 
@@ -502,10 +503,11 @@ SolvCountPackages(
     );
 
 uint32_t
-SolvReadInstalledRpms(
+SolvInitializeSystemRepo(
     Pool* pPool,
     Repo** ppRepo,
-    const char* pszCacheFileName
+    const char* pszCacheFileName,
+    int nSkipInstalledRpms
     );
 
 uint32_t
diff --git a/solv/tdnfpool.c b/solv/tdnfpool.c
index b22de1d..6a64f43 100644
--- a/solv/tdnfpool.c
+++ b/solv/tdnfpool.c
@@ -61,7 +61,8 @@ uint32_t
 SolvInitSack(
     PSolvSack *ppSack,
     const char* pszCacheDir,
-    const char* pszRootDir
+    const char* pszRootDir,
+    int nSkipInstalledRpms
     )
 {
     uint32_t dwError = 0;
@@ -109,7 +110,7 @@ SolvInitSack(
     pool_setarch(pPool, systemInfo.machine);
     pool_set_flag(pPool, POOL_FLAG_ADDFILEPROVIDESFILTERED, 1);
 
-    dwError = SolvReadInstalledRpms(pPool, &pRepo, pszCacheDir);
+    dwError = SolvInitializeSystemRepo(pPool, &pRepo, pszCacheDir, nSkipInstalledRpms);
     BAIL_ON_TDNF_LIBSOLV_ERROR(dwError);
 
     pool_set_installed(pPool, pRepo);
diff --git a/solv/tdnfrepo.c b/solv/tdnfrepo.c
index d98d9c7..437d931 100644
--- a/solv/tdnfrepo.c
+++ b/solv/tdnfrepo.c
@@ -1,4 +1,3 @@
-
 /*
  * Copyright (C) 2015-2021 VMware, Inc. All Rights Reserved.
  *
@@ -270,15 +269,14 @@ error:
 uint32_t
 SolvReadInstalledRpms(
     Pool* pPool,
-    Repo** ppRepo,
+    Repo* pRepo,
     const char*  pszCacheFileName
     )
 {
     uint32_t dwError = 0;
-    Repo *pRepo = NULL;
     FILE *pCacheFile = NULL;
     int  dwFlags = 0;
-    if(!pPool || !ppRepo)
+    if(!pPool || !pRepo)
     {
         dwError = ERROR_TDNF_INVALID_PARAMETER;
         BAIL_ON_TDNF_LIBSOLV_ERROR(dwError);
@@ -310,7 +308,6 @@ SolvReadInstalledRpms(
         dwError = ERROR_TDNF_SOLV_IO;
         BAIL_ON_TDNF_LIBSOLV_ERROR(dwError);
     }
-    *ppRepo = pRepo;
 
 cleanup:
     if (pCacheFile)
@@ -325,6 +322,55 @@ error:
     goto cleanup;
 }
 
+uint32_t
+SolvInitializeSystemRepo(
+        Pool* pPool,
+        Repo** ppRepo,
+        const char*  pszCacheFileName,
+        int nSkipInstalledRpms
+        )
+{
+    uint32_t dwError = 0;
+    Repo* pRepo = NULL;
+
+    if(!pPool)
+    {
+        dwError = ERROR_TDNF_INVALID_PARAMETER;
+        BAIL_ON_TDNF_LIBSOLV_ERROR(dwError);
+    }
+
+    pRepo = repo_create(pPool, SYSTEM_REPO_NAME);
+    if(pRepo == NULL)
+    {
+        dwError = ERROR_TDNF_INVALID_PARAMETER;
+        BAIL_ON_TDNF_LIBSOLV_ERROR(dwError);
+    }
+
+    if(!nSkipInstalledRpms)
+    {
+        dwError = SolvReadInstalledRpms(pPool, pRepo, pszCacheFileName);
+        BAIL_ON_TDNF_SYSTEM_ERROR(dwError);
+    }
+
+    if (dwError)
+    {
+        dwError = ERROR_TDNF_SOLV_IO;
+        BAIL_ON_TDNF_LIBSOLV_ERROR(dwError);
+    }
+    *ppRepo = pRepo;
+
+cleanup:
+    return dwError;
+
+error:
+    if(pRepo)
+    {
+        repo_free(pRepo, 1);
+    }
+    goto cleanup;
+}
+
+
 uint32_t
 SolvCalculateCookieForFile(
     char *pszFilePath,
diff --git a/tools/cli/lib/api.c b/tools/cli/lib/api.c
index f277b7c..539b908 100644
--- a/tools/cli/lib/api.c
+++ b/tools/cli/lib/api.c
@@ -718,3 +718,123 @@ TDNFCliRefresh(
     return TDNFRefresh(pContext->hTdnf);
 }
 
+uint32_t
+TDNFCliDownloadCommand(
+    PTDNF_CLI_CONTEXT pContext,
+    PTDNF_CMD_ARGS pCmdArgs
+    )
+    {
+    uint32_t dwError = 0;
+    char** ppszPackageArgs = NULL;
+    int nPackageCount = 0;
+    PTDNF_SOLVED_PKG_INFO pSolvedPkgInfo = NULL;
+    int nSilent = 0;
+    const int nSkipInstalledRpms = 1;
+    const TDNF_ALTERTYPE nAlterType = ALTER_INSTALL_ONLY_DOWNLOAD;
+
+    if(!pContext ||
+       !pContext->hTdnf ||
+       !pCmdArgs ||
+       IsNullOrEmptyString(pCmdArgs->pszDestDir))
+    {
+        dwError = ERROR_TDNF_INVALID_PARAMETER;
+        BAIL_ON_CLI_ERROR(dwError);
+    }
+
+    nSilent = pCmdArgs->nNoOutput;
+
+    dwError = TDNFCliParsePackageArgs(
+                  pCmdArgs,
+                  &ppszPackageArgs,
+                  &nPackageCount);
+    BAIL_ON_CLI_ERROR(dwError);
+
+    if (pCmdArgs->nAllDeps)
+    {
+        // On startup, tdnf initializes a libsolv pool and stores the
+        // initialized instance in a SolvSack. This pool contains all RPMs
+        // installed on the system. This data is taken into account during
+        // dependency resolution.
+        //
+        // Since initialization happens so early in the startup process,
+        // there is no clean way of altering it for *only* download commands.
+        //
+        // Instead, reset the SolvSack to generate a new libsolv pool that omits
+        // the system's RPMs. This will force all dependencies of the target
+        // download RPM to be obtained.
+        dwError = pContext->pFnResetSack(pContext, nSkipInstalledRpms);
+        BAIL_ON_CLI_ERROR(dwError);
+    }
+
+    dwError = pContext->pFnResolve(
+                pContext,
+                nAlterType,
+                &pSolvedPkgInfo);
+    BAIL_ON_CLI_ERROR(dwError);
+
+    if(!nSilent && pSolvedPkgInfo->ppszPkgsNotResolved)
+    {
+        dwError = PrintNotAvailable(pSolvedPkgInfo->ppszPkgsNotResolved);
+        BAIL_ON_CLI_ERROR(dwError);
+    }
+
+    dwError = TDNFAlterCommand(
+                pContext->hTdnf,
+                nAlterType,
+                pSolvedPkgInfo);
+    BAIL_ON_CLI_ERROR(dwError);
+
+cleanup:
+    TDNF_CLI_SAFE_FREE_STRINGARRAY(ppszPackageArgs);
+    TDNFCliFreeSolvedPackageInfo(pSolvedPkgInfo);
+    return dwError;
+
+error:
+    goto cleanup;
+}
+
+uint32_t
+TDNFCliDownloadNoDepsCommand(
+    PTDNF_CLI_CONTEXT pContext,
+    PTDNF_CMD_ARGS pCmdArgs
+    )
+{
+    uint32_t dwError = 0;
+
+    PTDNF_PKG_INFO pPkgInfo = NULL;
+    PTDNF_LIST_ARGS pInfoArgs = NULL;
+
+    uint32_t dwCount = 0;
+
+    if(!pContext ||
+       !pContext->hTdnf ||
+       !pContext->pFnDownloadNoDeps ||
+       !pCmdArgs ||
+       IsNullOrEmptyString(pCmdArgs->pszDestDir))
+    {
+        dwError = ERROR_TDNF_INVALID_PARAMETER;
+        BAIL_ON_CLI_ERROR(dwError);
+    }
+
+    dwError = TDNFCliParseInfoArgs(pCmdArgs, &pInfoArgs);
+    BAIL_ON_CLI_ERROR(dwError);
+
+    dwError = pContext->pFnDownloadNoDeps(pContext, pInfoArgs, &pPkgInfo, &dwCount);
+    BAIL_ON_CLI_ERROR(dwError);
+
+    printf("Download %d packages\n", dwCount);
+
+cleanup:
+    if(pInfoArgs)
+    {
+        TDNFCliFreeListArgs(pInfoArgs);
+    }
+    if(pPkgInfo)
+    {
+        TDNFFreePackageInfoArray(pPkgInfo, dwCount);
+    }
+    return dwError;
+
+error:
+    goto cleanup;
+}
diff --git a/tools/cli/lib/help.c b/tools/cli/lib/help.c
index 369e4e2..8b48c3c 100644
--- a/tools/cli/lib/help.c
+++ b/tools/cli/lib/help.c
@@ -39,6 +39,7 @@ TDNFCliShowHelp(
     pr_crit("\n");
 
     pr_crit("options    [-c [config file]]\n");
+    pr_crit("           [--alldeps]\n");
     pr_crit("           [--debugsolver]\n");
     pr_crit("           [--disablerepo=<repoid>]\n");
     pr_crit("           [--enablerepo=<repoid>]\n");
@@ -108,6 +109,8 @@ TDNFCliShowHelp(
     pr_crit("check-update              Check for available package upgrades\n");
     pr_crit("clean                     Remove cached data\n");
     pr_crit("distro-sync               Synchronize installed packages to the latest available versions\n");
+    pr_crit("download                  download a package\n");
+    pr_crit("download-nodeps           download a package without dependencies\n");
     pr_crit("downgrade                 downgrade a package\n");
     pr_crit("erase                     Remove a package or packages from your system\n");
     pr_crit("help                      Display a helpful usage message\n");
diff --git a/tools/cli/lib/parseargs.c b/tools/cli/lib/parseargs.c
index a022e13..15329ce 100644
--- a/tools/cli/lib/parseargs.c
+++ b/tools/cli/lib/parseargs.c
@@ -74,6 +74,7 @@ static TDNF_CMD_ARGS _opt = {0};
 //options - incomplete
 static struct option pstOptions[] =
 {
+    {"alldeps",       no_argument, &_opt.nAllDeps, 1},     //--alldeps
     {"allowerasing",  no_argument, &_opt.nAllowErasing, 1},//--allowerasing
     {"assumeno",      no_argument, &_opt.nAssumeNo, 1},    //--assumeno
     {"assumeyes",     no_argument, 0, 'y'},                //--assumeyes
@@ -112,6 +113,7 @@ static struct option pstOptions[] =
     {"noplugins",     no_argument, 0, 0},                  //--noplugins
     {"disableplugin", required_argument, 0, 0},            //--disableplugin
     {"enableplugin",  required_argument, 0, 0},            //--enableplugin
+    {"destdir",       required_argument, 0, 0},            //--destdir
     {"disableexcludes", no_argument, &_opt.nDisableExcludes, 1}, //--disableexcludes
     {"downloadonly",  no_argument, &_opt.nDownloadOnly, 1}, //--downloadonly
     {"downloaddir",   required_argument, 0, 0},            //--downloaddir
@@ -326,6 +328,7 @@ TDNFCopyOptions(
         BAIL_ON_CLI_ERROR(dwError);
     }
 
+    pArgs->nAllDeps       = pOptionArgs->nAllDeps;
     pArgs->nAllowErasing  = pOptionArgs->nAllowErasing;
     pArgs->nAssumeNo      = pOptionArgs->nAssumeNo;
     pArgs->nAssumeYes     = pOptionArgs->nAssumeYes;
@@ -383,6 +386,10 @@ ParseOption(
     {
         dwError = TDNFAllocateString(optarg, &pCmdArgs->pszInstallRoot);
     }
+    else if (!strcasecmp(pszName, "destdir"))
+    {
+        dwError = TDNFAllocateString(optarg, &pCmdArgs->pszDestDir);
+    }
     else if (!strcasecmp(pszName, "downloaddir"))
     {
         dwError = TDNFAllocateString(optarg, &pCmdArgs->pszDownloadDir);
diff --git a/tools/cli/main.c b/tools/cli/main.c
index 203f50a..eeeabdb 100644
--- a/tools/cli/main.c
+++ b/tools/cli/main.c
@@ -43,6 +43,8 @@ int main(int argc, char* argv[])
         {"clean",              TDNFCliCleanCommand},
         {"count",              TDNFCliCountCommand},
         {"distro-sync",        TDNFCliDistroSyncCommand},
+        {"download",           TDNFCliDownloadCommand},
+        {"download-nodeps",    TDNFCliDownloadNoDepsCommand},
         {"downgrade",          TDNFCliDowngradeCommand},
         {"erase",              TDNFCliEraseCommand},
         {"help",               TDNFCliHelpCommand},
@@ -109,13 +111,15 @@ int main(int argc, char* argv[])
 
     /*
      * Alter and resolve will address commands like
-     * install, upgrade, erase, downgrade, distrosync
+     * install, upgrade, erase, download, downgrade, distrosync
      */
     _context.pFnAlter = TDNFCliInvokeAlter;
+    _context.pFnResetSack = TDNFCliInvokeResetSack;
     _context.pFnResolve = TDNFCliInvokeResolve;
     _context.pFnSearch = TDNFCliInvokeSearch;
     _context.pFnUpdateInfo = TDNFCliInvokeUpdateInfo;
     _context.pFnUpdateInfoSummary = TDNFCliInvokeUpdateInfoSummary;
+    _context.pFnDownloadNoDeps = TDNFCliInvokeDownloadNoDeps;
 
     dwError = TDNFCliParseArgs(argc, argv, &pCmdArgs);
     BAIL_ON_CLI_ERROR(dwError);
@@ -527,3 +531,26 @@ TDNFCliInvokeUpdateInfoSummary(
                ppSummary);
 }
 
+uint32_t
+TDNFCliInvokeResetSack(
+    PTDNF_CLI_CONTEXT pContext,
+    int nSkipInstalledRpms
+    )
+{
+    return TDNFResetSack(pContext->hTdnf, nSkipInstalledRpms);
+}
+
+uint32_t
+TDNFCliInvokeDownloadNoDeps(
+        PTDNF_CLI_CONTEXT pContext,
+        PTDNF_LIST_ARGS pInfoArgs,
+        PTDNF_PKG_INFO *ppPkgInfo,
+        uint32_t *pdwCount
+        )
+{
+    return TDNFDownloadNoDepsCommand(pContext->hTdnf,
+                   pInfoArgs->nScope,
+                   pInfoArgs->ppszPackageNameSpecs,
+                   ppPkgInfo,
+                   pdwCount);
+}
diff --git a/tools/cli/prototypes.h b/tools/cli/prototypes.h
index 0afba59..daff8be 100644
--- a/tools/cli/prototypes.h
+++ b/tools/cli/prototypes.h
@@ -369,3 +369,17 @@ void
 TDNFFreeListArgs(
     PTDNF_LIST_ARGS pListArgs
     );
+
+uint32_t
+TDNFCliInvokeResetSack(
+    PTDNF_CLI_CONTEXT pContext,
+    int nSkipInstalledRpms
+    );
+
+uint32_t
+TDNFCliInvokeDownloadNoDeps(
+    PTDNF_CLI_CONTEXT pContext,
+    PTDNF_LIST_ARGS pInfoArgs,
+    PTDNF_PKG_INFO *ppPkgInfo,
+    uint32_t *pdwCount
+    );
